worker_processes 2;        #nginx worker 
error_log logs/error.log debug;


events {
    worker_connections 1024;
}

http {
    access_log logs/access.log;   
    upstream tomcat {       	
        server 127.0.0.1:8080;
    }
    
    lua_shared_dict address 10m;
    init_by_lua_file "lua/conf/init.lua";

    lua_package_path "/Users/jingb/openRestyWorkSpace/lua/?.lua;;";

    server {
        listen 6699;
        lua_need_request_body on;
        lua_code_cache off;

	access_by_lua_file "lua/hasPermission.lua";

	location /variableScope {
	  content_by_lua_block {
	    local data = require "variableScope"
	    ngx.say(data.hello())
	  }
	}

	# rewrite '^/([a-z]+)/(update|create|delete|query)/?([0-9]*)$' /$1/$2;
	
	location ^~ /user {
	  set $model $1;
	  set $action $2;
	  set $instance $3;
	  content_by_lua_file "lua/$1/$2.lua";
	  default_type 'text/json';  
	}

	location / {
	  content_by_lua_block {
	    require "routes":dispatch();
	  }
	}

	location = /test {
	  content_by_lua_file "lua/test.lua";
	  default_type 'text/json';  
	}
	
	location ~ ^/getDataFromRedis/([A-Za-z0-9]+)$ {  
	  default_type 'text/html';  
	  charset utf-8;  
	  lua_code_cache on;  
	  set $key $1;  
	  content_by_lua_file "lua/getDataFromRedis.lua";
	} 

	location ~ /tomcat/(.*) {  
	  keepalive_timeout   30s;  
	  keepalive_requests  100;  
  
	  rewrite /tomcat(/.*) $1 break;  
	  #之后该服务将只有内部使用，ngx.location.capture  
	  proxy_pass_request_headers off;  
	  #more_clear_input_headers Accept-Encoding;  
	  proxy_next_upstream error timeout;  
	  proxy_pass http://tomcat;  
        } 
	
	location /redis {
	    content_by_lua_file "lua/redis.lua";
	}
    }
    
}
